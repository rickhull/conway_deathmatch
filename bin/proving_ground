#!/usr/bin/env ruby

require 'set'
require 'slop'
require 'conway_deathmatch'
require 'conway_deathmatch/shapes'

# process cmdline options
#
opts = Slop.parse(help: true,
                  banner: true,
	          strict: true,
		  optional_arguments: true) do
  banner 'Usage: proving_ground [options]'

  on 'w', 'width=',      '[int] Grid width', as: Integer
  on      'height=',     '[int] Grid height', as: Integer
  on 'n', 'num_ticks=',  '[int] Max number of ticks to generate', as: Integer
  on 'p', 'num_points=', '[int] Number of points to generate', as: Integer
  on 'm', 'max_collisions=', '[int] Max number of collisions', as: Integer
end

num_points = opts[:num_points] || 5
width = opts[:width] || num_points * 5
height = opts[:height] || num_points * 5
num_ticks = opts[:num_ticks] || num_points * 5
max_c = opts[:max_collisions] || num_points ** 2

# choose center point
# choose next point within 2 units randomly
def generate_points(num_points, width, height)
  points = [[width / 2, height / 2]]
  count = 0
  while points.length < num_points
    raise("sanity check failed") if count > num_points * 2
    count += 1
    next_p = next_point(points.sample)
    if next_p[0].between?(0, width - 1) and next_p[1].between?(0, height - 1)
      points << next_p unless points.include?(next_p)
    else
      # debug
      puts "#{next_p.inspect} out of bounds"
    end
  end
  points
end

def next_point(prev_point)
  prev_point.map { |dim| random_within(dim, 2) }
end

def random_within(x, dist)
  new_x = x - dist + rand(dist * 2)
  new_x += 1 if new_x >= x
  new_x
end

def shape_str(points)
  points.map { |point| "p #{point[0]} #{point[1]}" }.join(' ')
end

def conclude!(results, w, h)
  results.each { |k, res|
    puts "#{k} population: #{res[0]}"
    puts "shape_str: #{shape_str(res[1])}"
    puts
  }
  puts "Grid: #{w}x#{h}"

  exit 0
end

results = { final: [0], peak: [0], score: [0], }
seen = Set.new
collisions = 0

Signal.trap("INT") { conclude!(results, width, height) }

loop {
  # generate a random shape
  points = generate_points(num_points, width, height)

  # have we seen these points before?
  hsh = points.hash
  if seen.member? hsh
    collisions += 1
    puts "X" * collisions
    break if collisions > max_c # exit the loop, stop generating points
    next
  end
  seen << hsh

  # initialize grid with generated shape
  b = ConwayDeathmatch.new(width, height)
  b.add_points(points)

  current = peak = score = 0     # track population (results)
  static_count = 0               # detect a stabilized grid

  # iterate the game of life
  num_ticks.times { |i|
    b.tick

    # evaluate grid
    last = current
    current = b.population[ConwayDeathmatch::ALIVE]
    peak = current if current > peak
    score += current * i

    # cease ticks for static or (soon-to-be) empty grids
    break if current < 3
    static_count = (current == last ? static_count + 1 : 0)
    break if static_count > 3
  }

  puts "#{current} (#{peak}) [#{score}]"

  # track the highest populators
  #
  if current > results[:final][0]
    results[:final] = [current, points]
    puts "\tLargest final: #{current}"
  end

  if peak > results[:peak][0]
    results[:peak] = [peak, points]
    puts "\tLargest peak: #{peak}"
  end

  if score > results[:score][0]
    results[:score] = [score, points]
    puts "\tLargest score: #{score}"
  end
}

conclude!(results, width, height)

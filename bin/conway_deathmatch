#!/usr/bin/env ruby

require 'slop'
require 'conway_deathmatch'
require 'conway_deathmatch/shapes'

# process cmdline options
#
opts = Slop.parse do |o|
  o.banner = "Usage: conway_deathmatch [options]"
  o.int '-x', '--width', 'Grid width'
  o.int '-y', '--height', 'Grid height'
  o.int '-n', '--ticks', 'Max number of ticks to generate'
  o.float '-s', '--sleep', 'Sleep duration'
  o.string '-p', '--points', 'e.g. acorn 50 18 p 1 2 p 3 4'
  o.bool '-g', '--step', 'Pause each tick for user input'
  o.bool '-r', '--renderfinal', 'Only render the final state'
  o.string '-d', '--deathmatch', 'single|aggressive|defensive|friendly'
  o.string '--one', 'points for population "1"'
  o.string '--two', 'points for population "2"'
  o.string '--three', 'points for population "3"'

  o.on '-h', '--help' do
    puts o
    exit
  end
end

def opts.error(msg = nil)
  puts self
  puts "ERROR: #{msg}" if msg
  exit 1
end

width = opts[:width] || 70
height = opts[:height] || 40
shapes = opts[:points] || "acorn 50 18"
slp = opts[:sleep] || 0.02
n = opts[:ticks]
render_continuous = (n.nil? or !opts.renderfinal?)
deathmatch = case opts[:deathmatch].to_s.downcase
             when '', 's', 'standard', 'single', 't', 'traditional' then nil
             when 'a', 'aggressive' then :aggressive
             when 'd', 'defensive' then :defensive
             when 'f', 'friendly' then :friendly
             else
               opts.error("unknown deathmatch option: #{opts[:deathmatch]}")
             end

# create game
#
b = ConwayDeathmatch.new(width, height)

# Multiple populations or not
if opts[:one] or opts[:two] or opts[:three]
  b.deathmatch = deathmatch || :aggressive
  ConwayDeathmatch::Shapes.add(b, opts[:one], 1) if opts[:one]
  ConwayDeathmatch::Shapes.add(b, opts[:two], 2) if opts[:two]
  ConwayDeathmatch::Shapes.add(b, opts[:three], 3) if opts[:three]
else
  b.deathmatch = deathmatch
  ConwayDeathmatch::Shapes.add(b, shapes)
end

# play game
#
count = 0
while n.nil? or count <= n
  if render_continuous
    puts
    puts count
    puts b.render
  end

  b.tick

  if opts.step?
    $stdin.gets
  else
    sleep slp if slp > 0.0
  end
  count += 1
end

# finish
#
if n and opts.renderfinal?
  puts
  puts count
  puts b.render
end

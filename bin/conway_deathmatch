#!/usr/bin/env ruby

gem 'slop', '~> 3'
require 'slop'
require 'conway_deathmatch'
require 'conway_deathmatch/shapes'

# process cmdline options
#
opts = Slop.parse(help: true,
                  banner: true,
                  strict: true,
                  optional_arguments: true) do
  banner 'Usage: conway_deathmatch [options]'

  on 'x', 'width=',      '[int] Grid width', as: Integer
  on 'y', 'height=',     '[int] Grid height', as: Integer
  # on 'D', 'dimensions=', '[str] width x height', as: String
  on 'n', 'ticks=',  '[int] Max number of ticks to generate', as: Integer
  on 's', 'sleep=',      '[flt] Sleep duration', as: Float
  on 'p', 'points=',     '[str] e.g. "acorn 50 18 p 1 2 p 3 4"', as: String
  on 'g', 'step',        'Hold ticks for user input'
  on 'r', 'renderfinal', 'Only render the final state'
  on 'd', 'deathmatch',
     '[str] single|aggressive|defensive|friendly', as: String
  on      'one=',        '[str] points for population "1"', as: String
  on      'two=',        '[str] points for population "2"', as: String
  on      'three=',      '[str] points for population "3"', as: String
end

width = opts[:width] || 70
height = opts[:height] || 40
shapes = opts[:points] || "acorn 50 18"
slp = opts[:sleep] || 0.02
n = opts[:ticks]
render_continuous = (n.nil? or !opts.renderfinal?)
deathmatch = case opts[:deathmatch].to_s.downcase
             when '', 's', 'standard', 'single', 't', 'traditional' then nil
             when 'a', 'aggressive' then :aggressive
             when 'd', 'defensive' then :defensive
             when 'f', 'friendly' then :friendly
             else
               raise "unknown: #{opts[:deathmatch]}"
             end

# create game
#
b = ConwayDeathmatch.new(width, height)

# Multiple populations or not
if opts[:one] or opts[:two] or opts[:three]
  b.deathmatch = deathmatch || :aggressive
  ConwayDeathmatch::Shapes.add(b, opts[:one], 1) if opts[:one]
  ConwayDeathmatch::Shapes.add(b, opts[:two], 2) if opts[:two]
  ConwayDeathmatch::Shapes.add(b, opts[:three], 3) if opts[:three]
else
  b.deathmatch = deathmatch
  ConwayDeathmatch::Shapes.add(b, shapes)
end

# play game
#
count = 0
while n.nil? or count <= n
  if render_continuous
    puts
    puts count
    puts b.render
  end

  b.tick

  if opts.step?
    $stdin.gets
  else
    sleep slp if slp > 0.0
  end
  count += 1
end

# finish
#
if n and opts.renderfinal?
  puts
  puts count
  puts b.render
end
